import "oaidl.idl";
import "ocidl.idl";

[uuid(0a7a4655-5660-47d0-8a37-98ae21399e57), version(0.4)]
library HostObjectLibrary
{
    struct image_t
    {
        long Width;
        long Height;
        SAFEARRAY(byte) Bytes;
    };

    //! [AddHostObjectInterface]
    [uuid(3a14c9c0-bc3e-453f-a314-4ce4a0ec81d8), object, local]
    interface IHostObject : IUnknown
    {
        [propget] HRESULT ComponentVersion([out, retval] __int32 * version);
        [propget] HRESULT ComponentVersionText([out, retval] BSTR * versionText);

        HRESULT Print([in] BSTR text);

        HRESULT Stop();
        HRESULT Play([in] bool paused);
        HRESULT Pause([in] bool paused);
        HRESULT Previous();
        HRESULT Next();
        HRESULT Random();

        HRESULT TogglePause();
        HRESULT ToggleMute();
        HRESULT ToggleStopAfterCurrent();

        HRESULT VolumeUp();
        HRESULT VolumeDown();

        HRESULT Seek([in] double time);
        HRESULT SeekDelta([in] double delta);

        [propget] HRESULT IsPlaying([out, retval] bool * value);
        [propget] HRESULT IsPaused([out, retval] bool * value);

        [propget] HRESULT StopAfterCurrent([out, retval] bool * value);
        [propput] HRESULT StopAfterCurrent([in] bool value);

        [propget] HRESULT Length([out, retval] double * value);
        [propget] HRESULT Position([out, retval] double * value);
        [propget] HRESULT CanSeek([out, retval] bool * value);

        [propget] HRESULT Volume([out, retval] double * value);
        [propput] HRESULT Volume([in] double value);

        [propget] HRESULT IsMuted([out, retval] bool * value);

        HRESULT GetFormattedText([in] BSTR text, [out, retval] BSTR * formattedText);

        HRESULT GetArtwork([in] BSTR type, [out, retval] BSTR * image);

        // Files
        HRESULT ReadAllText([in] BSTR filePath, [in] __int32 codePage, [out, retval] BSTR * text);
        HRESULT ReadImage([in] BSTR filePath, [out, retval] BSTR * image);

        // Playlists
        [propget] HRESULT PlaylistCount([out, retval] unsigned __int32 * count);

        [propget] HRESULT ActivePlaylist([out, retval] __int32 * index);
        [propput] HRESULT ActivePlaylist([in] __int32 index);

        [propget] HRESULT PlayingPlaylist([out, retval] __int32 * index);
        [propput] HRESULT PlayingPlaylist([in] __int32 index);

        HRESULT GetPlaylistName([in] __int32 index, [out, retval] BSTR * name);
        HRESULT SetPlaylistName([in] __int32 index, [in] BSTR name);

        HRESULT FindPlaylist([in] BSTR name, [out, retval] __int32 * index);

        HRESULT GetPlaylistItemCount([in] __int32 playlistIndex, [out, retval] unsigned __int32 * itemCount);

        HRESULT GetFocusedPlaylistItem([in] __int32 playlistIndex, [out, retval] __int32 * itemIndex);
        HRESULT SetFocusedPlaylistItem([in] __int32 playlistIndex, [in] __int32 itemIndex);
        HRESULT EnsurePlaylistItemVisible([in] __int32 playlistIndex, [in] __int32 itemIndex);
        HRESULT ExecutePlaylistDefaultAction([in] __int32 playlistIndex, [in] __int32 itemIndex);

        HRESULT CreatePlaylist([in] __int32 playlistIndex, [in] BSTR name, [out, retval] __int32 * newPlaylistIndex);
        HRESULT DuplicatePlaylist([in] __int32 playlistIndex, [in] BSTR name, [out, retval] __int32 * newPlaylistIndex);
        HRESULT ClearPlaylist([in] __int32 playlistIndex);
        HRESULT GetSelectedPlaylistItems([in] __int32 playlistIndex);
        HRESULT ClearPlaylistSelection([in] __int32 playlistIndex);

        // Auto Playlists
        HRESULT CreateAutoPlaylist([in] __int32 playlistIndex, [in] BSTR name, [in] BSTR query, [in] BSTR sort, [in] unsigned __int32 flags, [out, retval] __int32 * newPlaylistIndex);
        HRESULT IsAutoPlaylist([in] __int32 playlistIndex, [out, retval] bool * result);

        // Playback Order
        [propget] HRESULT PlaybackOrder([out, retval] __int32 * index);
        [propput] HRESULT PlaybackOrder([in] __int32 index);
    };

    [uuid(637abc45-11f7-4dde-84b4-317d62a638d3)]
    coclass HostObject
    {
        [default] interface IHostObject;
        interface IDispatch;
    };
}